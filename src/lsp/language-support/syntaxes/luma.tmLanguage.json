{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Luma",
  "scopeName": "source.luma",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-colon.luma",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.luma",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "storage.modifier.attribute.luma",
          "match": "#(returns_ownership|takes_ownership)\\b"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.luma",
          "match": "(@)(module|use)\\s+(\"[^\"]*\")(\\s+as\\s+([a-zA-Z_][a-zA-Z0-9_]*))?",
          "captures": {
            "1": {
              "name": "punctuation.definition.directive.luma"
            },
            "2": {
              "name": "keyword.control.directive.luma"
            },
            "3": {
              "name": "string.quoted.double.luma"
            },
            "4": {
              "name": "keyword.control.as.luma"
            },
            "5": {
              "name": "entity.name.namespace.luma"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.luma",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.luma",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.luma",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.luma",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.luma",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.luma",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.luma",
          "match": "\\b(if|elif|else|loop|break|continue|return|defer)\\b"
        },
        {
          "name": "storage.type.luma",
          "match": "\\b(const|let)\\b"
        },
        {
          "name": "keyword.other.luma",
          "match": "\\b(fn|struct|enum)\\b"
        },
        {
          "name": "storage.modifier.luma",
          "match": "\\b(pub|priv|public|private)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.luma",
          "match": "\\b(int|uint|float|double|bool|str|void|char|short|long|nil)\\b"
        },
        {
          "name": "entity.name.type.luma",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.luma",
          "begin": "\\b(const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)\\s*(fn)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.type.luma"
            },
            "2": {
              "name": "entity.name.function.luma"
            },
            "3": {
              "name": "keyword.operator.assignment.luma"
            },
            "4": {
              "name": "keyword.other.luma"
            },
            "5": {
              "name": "punctuation.definition.parameters.begin.luma"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.luma"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function.call.luma",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.luma"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.luma",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*:)"
        },
        {
          "include": "#types"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.luma",
          "match": "\\+\\+|--|\\+|\\-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.luma",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.luma",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.luma",
          "match": "="
        },
        {
          "name": "keyword.operator.bitwise.luma",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.pointer.luma",
          "match": "\\*|&"
        },
        {
          "name": "keyword.operator.runtime-member.luma",
          "match": "\\."
        },
        {
          "name": "keyword.operator.compiletime-const.luma",
          "match": "::"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.luma",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
