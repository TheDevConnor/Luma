@module "main"

pub const main = fn () int {
    let x: *int = cast<*int>(alloc(sizeof<int>));
    *x = 20;
    output(*x, "\n");

    :: free(x);
    return 0;
}
/*
 * ==18363== Memcheck, a memory error detector
 * ==18363== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
 * ==18363== Using Valgrind-3.25.1 and LibVEX; rerun with -h for copyright info
 * ==18363== Command: ./test
 * ==18363== 
 * 20
 * ==18363== 
 * ==18363== HEAP SUMMARY:
 * ==18363==     in use at exit: 8 bytes in 1 blocks
 * ==18363==   total heap usage: 2 allocs, 1 frees, 1,032 bytes allocated
 * ==18363== 
 * ==18363== LEAK SUMMARY:
 * ==18363==    definitely lost: 8 bytes in 1 blocks
 * ==18363==    indirectly lost: 0 bytes in 0 blocks
 * ==18363==      possibly lost: 0 bytes in 0 blocks
 * ==18363==    still reachable: 0 bytes in 0 blocks
 * ==18363==         suppressed: 0 bytes in 0 blocks
 * ==18363== Rerun with --leak-check=full to see details of leaked memory
 * ==18363== 
 * ==18363== For lists of detected and suppressed errors, rerun with: -s
 * ==18363== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/*