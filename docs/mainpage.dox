/**
 * @mainpage Luma
 *
 * @image html assets/luma.png width=120
 *
 * @section tagline A low-level compiled alternative to C, C++, and more!
 *
 * @section intro Introduction
 * Luma is a modern systems programming language designed to provide the performance
 * and control of low-level languages while maintaining developer productivity and
 * code clarity. Built from the ground up to address common pain points in systems programming.
 *
 * @section why Why?
 * Modern systems programming often involves a trade-off between performance,
 * safety, and developer experience. Luma aims to bridge this gap by providing:
 * - **Direct hardware access** without sacrificing code readability
 * - **Predictable performance** characteristics for systems-critical applications
 * - **Developer-friendly tooling** that doesn't compromise on compile speed
 * - **Memory safety options** that can be opted into when needed
 *
 * @section goals Language Goals
 * - üéØ **Minimal & Explicit Syntax** ‚Äì Avoid hidden control flow or magic
 * - ‚ö° **Fast Compilation** ‚Äì Prioritize developer feedback cycles
 * - üöÄ **Zero-Cost Abstractions** ‚Äì Avoid performance penalties for convenience
 * - üîß **Manual Memory Control** ‚Äì Support fine-grained memory management
 * - üõ†Ô∏è **Toolchain Simplicity** ‚Äì No complex build systems required
 *
 * @section status Project Status
 * **Current Phase:** Early Development  
 * Luma is currently in active development. Core language features are being implemented
 * and the compiler architecture is being established.
 *
 * **What's Working:**
 * - Basic lexer, Allocator, Pratt parser, and AST generation
 *
 * **Coming Soon:**
 * - TypeChecker, and LLVM generation
 *
 * @section getting_started Getting Started
 * **Prerequisites:**
 * - [Make](https://www.gnu.org/software/make/) ‚Äì Build automation
 * - [GCC](https://gcc.gnu.org/) ‚Äì GNU Compiler Collection
 * - [LLVM](https://releases.llvm.org/download.html) ‚Äì Compiler infrastructure
 * - [Valgrind](https://valgrind.org/) *(optional)* ‚Äì Memory debugging
 *
 * @section architecture Architecture Diagram
 * @dot
 * digraph LuxArch {
 *   rankdir=LR;
 *   node [shape=box, style=rounded, fontsize=12, fontname="Helvetica"];
 * 
 *   SourceCode [label="Luma Source Code (.lx)"];
 *   Lexer [label="Lexer"];
 *   Parser [label="Pratt Parser"];
 *   TypeChecker [label="Type Checker"];
 *   LLVMGen [label="LLVM IR Generator"];
 *   Optimizer [label="LLVM Optimizer"];
 *   CodeGen [label="Machine Code"];
 * 
 *   SourceCode -> Lexer -> Parser -> TypeChecker -> LLVMGen -> Optimizer -> CodeGen;
 * }
 * @enddot
 *
 * @section usage Usage
 * *(usage instructions coming soon)*
 *
 * @section join_us Join Us
 * Interested in contributing to Luma? We'd love to have you!  
 * *(links coming soon)*
 *
 * ---
 * **Built with ‚ù§Ô∏è by the Luma community**
 */
